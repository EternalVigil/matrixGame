{"ast":null,"code":"import { observable, action, toJS } from 'mobx';\n\nclass DataStore {\n  constructor(Data) {\n    this.gridSize = observable.box(9);\n    this.playerPosition = observable({\n      row: 0,\n      cell: 0\n    });\n    this.enemyPosition = observable({\n      row: 4,\n      cell: 4\n    });\n    this.movePlayer = action((targetRow, targetCell) => {\n      if (this.playerPosition.row !== targetRow) {\n        this.playerPosition.row = targetRow;\n      }\n\n      if (this.playerPosition.cell !== targetCell) {\n        this.playerPosition.cell = targetCell;\n      }\n    });\n    this.moveEnemy = action(() => {\n      const randomDirection = Math.floor(Math.random() * this.gridSize);\n\n      switch (randomDirection) {\n        case 1:\n          console.log('enemy move down left');\n\n          if (this.enemyPosition.row < this.gridSize - 1 && this.enemyPosition.cell > 0) {\n            this.enemyPosition = {\n              row: this.enemyPosition.row + 1,\n              cell: this.enemyPosition.cell - 1\n            };\n          }\n\n          break;\n\n        case 2:\n          console.log('enemy move down');\n\n          if (this.enemyPosition.row < this.gridSize - 1) {\n            this.enemyPosition = {\n              row: this.enemyPosition.row + 1,\n              cell: this.enemyPosition.cell\n            };\n          }\n\n          break;\n\n        case 3:\n          console.log('enemy move down right');\n\n          if (this.enemyPosition.row < this.gridSize - 1 && this.enemyPosition.cell < this.gridSize - 1) {\n            this.enemyPosition = {\n              row: this.enemyPosition.row + 1,\n              cell: this.enemyPosition.cell + 1\n            };\n          }\n\n          break;\n\n        case 4:\n          console.log('enemy move left');\n\n          if (this.enemyPosition.cell > 0) {\n            this.enemyPosition = {\n              row: this.enemyPosition.row,\n              cell: this.enemyPosition.cell - 1\n            };\n          }\n\n          break;\n\n        case 5:\n          console.log(`enemy won't move`);\n          break;\n\n        case 6:\n          console.log('enemy move right');\n\n          if (this.enemyPosition.cell < this.gridSize - 1) {\n            this.enemyPosition = {\n              row: this.enemyPosition.row,\n              cell: this.enemyPosition.cell + 1\n            };\n          }\n\n          break;\n\n        case 7:\n          console.log('enemy move up left');\n\n          if (this.enemyPosition.row > 0 && this.enemyPosition.cell > 0) {\n            this.enemyPosition = {\n              row: this.enemyPosition.row - 1,\n              cell: this.enemyPosition.cell - 1\n            };\n          }\n\n          break;\n\n        case 8:\n          console.log('enemy move up');\n\n          if (this.enemyPosition.row > 0) {\n            this.enemyPosition = {\n              row: this.enemyPosition.row - 1,\n              cell: this.enemyPosition.cell\n            };\n          }\n\n          break;\n\n        case 9:\n          console.log('enemy move up right');\n\n          if (this.enemyPosition.row && this.enemyPosition.cell < this.gridSize - 1) {\n            this.enemyPosition = {\n              row: this.enemyPosition.row - 1,\n              cell: this.enemyPosition.cell + 1\n            };\n          }\n\n          break;\n\n        default:\n          console.log('oops');\n          break;\n      }\n    });\n  }\n\n}\n\nexport default new DataStore();","map":{"version":3,"sources":["/Users/eternalvigil/Desktop/code-projects/matrixGame/src/stores/DataStore.js"],"names":["observable","action","toJS","DataStore","constructor","Data","gridSize","box","playerPosition","row","cell","enemyPosition","movePlayer","targetRow","targetCell","moveEnemy","randomDirection","Math","floor","random","console","log"],"mappings":"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","sourcesContent":["import {observable, action, toJS} from 'mobx';\n\nclass DataStore {\n\tconstructor(Data) {\n\t}\n\n\tgridSize = observable.box(9);\n\tplayerPosition = observable({row: 0, cell: 0});\n\tenemyPosition = observable({row: 4, cell: 4});\n\n\tmovePlayer = action( (targetRow, targetCell) => {\n\t\tif(this.playerPosition.row !== targetRow) {\n\t\t\tthis.playerPosition.row = targetRow;\n\t\t}\n\n\t\tif(this.playerPosition.cell !== targetCell) {\n\t\t\tthis.playerPosition.cell = targetCell;\n\t\t}\n\t});\n\n\tmoveEnemy = action( () => {\n\t\tconst randomDirection = Math.floor( Math.random() * this.gridSize);\n\n\t    switch (randomDirection) {\n\t      case 1:\n\t        console.log('enemy move down left');\n\t        if(this.enemyPosition.row < this.gridSize - 1 && this.enemyPosition.cell > 0) {\n\t        \tthis.enemyPosition = ({ row: this.enemyPosition.row + 1, cell: this.enemyPosition.cell - 1});\n\t        }\n\t        break;\n\t      case 2: \n\t        console.log('enemy move down');\n\t        if(this.enemyPosition.row < this.gridSize - 1) {\n\t          this.enemyPosition = ({ row: this.enemyPosition.row + 1, cell: this.enemyPosition.cell});\n\t        }\n\t        break;\n\t      case 3: \n\t        console.log('enemy move down right');\n\t        if(this.enemyPosition.row < this.gridSize - 1 && this.enemyPosition.cell < this.gridSize - 1) {\n\t          this.enemyPosition = ({row: this.enemyPosition.row + 1, cell: this.enemyPosition.cell + 1});\n\t        }\n\t        break;\n\t      case 4: \n\t        console.log('enemy move left');\n\t        if(this.enemyPosition.cell > 0) {\n\t          this.enemyPosition = ({row: this.enemyPosition.row, cell: this.enemyPosition.cell - 1});\n\t        }\n\t        break;\n\t      case 5: \n\t        console.log(`enemy won't move`);\n\t        break;\n\t      case 6: \n\t        console.log('enemy move right');\n\t        if (this.enemyPosition.cell < this.gridSize - 1) {\n\t          this.enemyPosition = ({row: this.enemyPosition.row, cell: this.enemyPosition.cell + 1})\n\t        }\n\t        break;\n\t      case 7: \n\t        console.log('enemy move up left');\n\t        if(this.enemyPosition.row > 0 && this.enemyPosition.cell > 0) {\n\t          this.enemyPosition = ({row: this.enemyPosition.row - 1, cell: this.enemyPosition.cell - 1})\n\t        }\n\t        break;\n\t      case 8: \n\t        console.log('enemy move up');\n\t        if(this.enemyPosition.row > 0) {\n\t          this.enemyPosition = ({row: this.enemyPosition.row - 1, cell: this.enemyPosition.cell});\n\t        }\n\t        break;\n\t      case 9: \n\t        console.log('enemy move up right');\n\t        if(this.enemyPosition.row && this.enemyPosition.cell < this.gridSize - 1) {\n\t          this.enemyPosition = ({row: this.enemyPosition.row - 1, cell: this.enemyPosition.cell + 1})\n\t        }\n\t        break;\n\n\t      default: \n\t        console.log('oops');\n\t        break;\n\t    }\n\t});\n}\n\nexport default new DataStore();"]},"metadata":{},"sourceType":"module"}