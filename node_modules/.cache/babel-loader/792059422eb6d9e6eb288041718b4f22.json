{"ast":null,"code":"import { observable, action } from 'mobx';\n\nclass DataStore {\n  constructor(Data) {\n    this.gridSize = observable.box(9);\n    this.playerPosition = observable({\n      row: 0,\n      cell: 0\n    });\n    this.playerPowerLevel = observable.box(1);\n    this.enemyPosition = observable({\n      row: 4,\n      cell: 4\n    });\n    this.enemyPowerLevel = observable.box(2);\n    this.movePlayer = action((targetRow, targetCell) => {\n      if (this.playerPosition.row !== targetRow) {\n        this.playerPosition.row = targetRow;\n      }\n\n      if (this.playerPosition.cell !== targetCell) {\n        this.playerPosition.cell = targetCell;\n      }\n    });\n    this.moveEnemy = action(() => {\n      const randomDirection = Math.floor(Math.random() * this.gridSize);\n\n      switch (randomDirection) {\n        case 1:\n          console.log('enemy move down left');\n\n          if (this.enemyPosition.row < this.gridSize - 1 && this.enemyPosition.cell > 0) {\n            this.enemyPosition = {\n              row: this.enemyPosition.row + 1,\n              cell: this.enemyPosition.cell - 1\n            };\n          }\n\n          break;\n\n        case 2:\n          console.log('enemy move down');\n\n          if (this.enemyPosition.row < this.gridSize - 1) {\n            this.enemyPosition = {\n              row: this.enemyPosition.row + 1,\n              cell: this.enemyPosition.cell\n            };\n          }\n\n          break;\n\n        case 3:\n          console.log('enemy move down right');\n\n          if (this.enemyPosition.row < this.gridSize - 1 && this.enemyPosition.cell < this.gridSize - 1) {\n            this.enemyPosition = {\n              row: this.enemyPosition.row + 1,\n              cell: this.enemyPosition.cell + 1\n            };\n          }\n\n          break;\n\n        case 4:\n          console.log('enemy move left');\n\n          if (this.enemyPosition.cell > 0) {\n            this.enemyPosition = {\n              row: this.enemyPosition.row,\n              cell: this.enemyPosition.cell - 1\n            };\n          }\n\n          break;\n\n        case 5:\n          console.log(`enemy won't move`);\n          break;\n\n        case 6:\n          console.log('enemy move right');\n\n          if (this.enemyPosition.cell < this.gridSize - 1) {\n            this.enemyPosition = {\n              row: this.enemyPosition.row,\n              cell: this.enemyPosition.cell + 1\n            };\n          }\n\n          break;\n\n        case 7:\n          console.log('enemy move up left');\n\n          if (this.enemyPosition.row > 0 && this.enemyPosition.cell > 0) {\n            this.enemyPosition = {\n              row: this.enemyPosition.row - 1,\n              cell: this.enemyPosition.cell - 1\n            };\n          }\n\n          break;\n\n        case 8:\n          console.log('enemy move up');\n\n          if (this.enemyPosition.row > 0) {\n            this.enemyPosition = {\n              row: this.enemyPosition.row - 1,\n              cell: this.enemyPosition.cell\n            };\n          }\n\n          break;\n\n        case 9:\n          console.log('enemy move up right');\n\n          if (this.enemyPosition.row && this.enemyPosition.cell < this.gridSize - 1) {\n            this.enemyPosition = {\n              row: this.enemyPosition.row - 1,\n              cell: this.enemyPosition.cell + 1\n            };\n          }\n\n          break;\n\n        default:\n          console.log('oops');\n          break;\n      }\n    });\n    console.log('initializing datastore');\n  } // grid constructor size\n\n\n}\n\nexport default new DataStore();","map":{"version":3,"sources":["/Users/eternalvigil/Desktop/code-projects/matrixGame/src/stores/DataStore.js"],"names":["observable","action","DataStore","constructor","Data","gridSize","box","playerPosition","row","cell","playerPowerLevel","enemyPosition","enemyPowerLevel","movePlayer","targetRow","targetCell","moveEnemy","randomDirection","Math","floor","random","console","log"],"mappings":"AAAA,SAAQA,UAAR,EAAoBC,MAApB,QAAiC,MAAjC;;AAEA,MAAMC,SAAN,CAAgB;AACfC,EAAAA,WAAW,CAACC,IAAD,EAAO;AAAA,SAKlBC,QALkB,GAKPL,UAAU,CAACM,GAAX,CAAe,CAAf,CALO;AAAA,SAQlBC,cARkB,GAQDP,UAAU,CAAC;AAACQ,MAAAA,GAAG,EAAE,CAAN;AAASC,MAAAA,IAAI,EAAE;AAAf,KAAD,CART;AAAA,SASlBC,gBATkB,GASCV,UAAU,CAACM,GAAX,CAAe,CAAf,CATD;AAAA,SAYlBK,aAZkB,GAYFX,UAAU,CAAC;AAACQ,MAAAA,GAAG,EAAE,CAAN;AAASC,MAAAA,IAAI,EAAE;AAAf,KAAD,CAZR;AAAA,SAalBG,eAbkB,GAaAZ,UAAU,CAACM,GAAX,CAAe,CAAf,CAbA;AAAA,SAelBO,UAfkB,GAeLZ,MAAM,CAAE,CAACa,SAAD,EAAYC,UAAZ,KAA2B;AAC/C,UAAG,KAAKR,cAAL,CAAoBC,GAApB,KAA4BM,SAA/B,EAA0C;AACzC,aAAKP,cAAL,CAAoBC,GAApB,GAA0BM,SAA1B;AACA;;AAED,UAAG,KAAKP,cAAL,CAAoBE,IAApB,KAA6BM,UAAhC,EAA4C;AAC3C,aAAKR,cAAL,CAAoBE,IAApB,GAA2BM,UAA3B;AACA;AACD,KARkB,CAfD;AAAA,SAyBlBC,SAzBkB,GAyBNf,MAAM,CAAE,MAAM;AACzB,YAAMgB,eAAe,GAAGC,IAAI,CAACC,KAAL,CAAYD,IAAI,CAACE,MAAL,KAAgB,KAAKf,QAAjC,CAAxB;;AAEG,cAAQY,eAAR;AACE,aAAK,CAAL;AACEI,UAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;;AACA,cAAG,KAAKX,aAAL,CAAmBH,GAAnB,GAAyB,KAAKH,QAAL,GAAgB,CAAzC,IAA8C,KAAKM,aAAL,CAAmBF,IAAnB,GAA0B,CAA3E,EAA8E;AAC7E,iBAAKE,aAAL,GAAsB;AAAEH,cAAAA,GAAG,EAAE,KAAKG,aAAL,CAAmBH,GAAnB,GAAyB,CAAhC;AAAmCC,cAAAA,IAAI,EAAE,KAAKE,aAAL,CAAmBF,IAAnB,GAA0B;AAAnE,aAAtB;AACA;;AACD;;AACF,aAAK,CAAL;AACEY,UAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;;AACA,cAAG,KAAKX,aAAL,CAAmBH,GAAnB,GAAyB,KAAKH,QAAL,GAAgB,CAA5C,EAA+C;AAC7C,iBAAKM,aAAL,GAAsB;AAAEH,cAAAA,GAAG,EAAE,KAAKG,aAAL,CAAmBH,GAAnB,GAAyB,CAAhC;AAAmCC,cAAAA,IAAI,EAAE,KAAKE,aAAL,CAAmBF;AAA5D,aAAtB;AACD;;AACD;;AACF,aAAK,CAAL;AACEY,UAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;;AACA,cAAG,KAAKX,aAAL,CAAmBH,GAAnB,GAAyB,KAAKH,QAAL,GAAgB,CAAzC,IAA8C,KAAKM,aAAL,CAAmBF,IAAnB,GAA0B,KAAKJ,QAAL,GAAgB,CAA3F,EAA8F;AAC5F,iBAAKM,aAAL,GAAsB;AAACH,cAAAA,GAAG,EAAE,KAAKG,aAAL,CAAmBH,GAAnB,GAAyB,CAA/B;AAAkCC,cAAAA,IAAI,EAAE,KAAKE,aAAL,CAAmBF,IAAnB,GAA0B;AAAlE,aAAtB;AACD;;AACD;;AACF,aAAK,CAAL;AACEY,UAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;;AACA,cAAG,KAAKX,aAAL,CAAmBF,IAAnB,GAA0B,CAA7B,EAAgC;AAC9B,iBAAKE,aAAL,GAAsB;AAACH,cAAAA,GAAG,EAAE,KAAKG,aAAL,CAAmBH,GAAzB;AAA8BC,cAAAA,IAAI,EAAE,KAAKE,aAAL,CAAmBF,IAAnB,GAA0B;AAA9D,aAAtB;AACD;;AACD;;AACF,aAAK,CAAL;AACEY,UAAAA,OAAO,CAACC,GAAR,CAAa,kBAAb;AACA;;AACF,aAAK,CAAL;AACED,UAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;;AACA,cAAI,KAAKX,aAAL,CAAmBF,IAAnB,GAA0B,KAAKJ,QAAL,GAAgB,CAA9C,EAAiD;AAC/C,iBAAKM,aAAL,GAAsB;AAACH,cAAAA,GAAG,EAAE,KAAKG,aAAL,CAAmBH,GAAzB;AAA8BC,cAAAA,IAAI,EAAE,KAAKE,aAAL,CAAmBF,IAAnB,GAA0B;AAA9D,aAAtB;AACD;;AACD;;AACF,aAAK,CAAL;AACEY,UAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;;AACA,cAAG,KAAKX,aAAL,CAAmBH,GAAnB,GAAyB,CAAzB,IAA8B,KAAKG,aAAL,CAAmBF,IAAnB,GAA0B,CAA3D,EAA8D;AAC5D,iBAAKE,aAAL,GAAsB;AAACH,cAAAA,GAAG,EAAE,KAAKG,aAAL,CAAmBH,GAAnB,GAAyB,CAA/B;AAAkCC,cAAAA,IAAI,EAAE,KAAKE,aAAL,CAAmBF,IAAnB,GAA0B;AAAlE,aAAtB;AACD;;AACD;;AACF,aAAK,CAAL;AACEY,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;;AACA,cAAG,KAAKX,aAAL,CAAmBH,GAAnB,GAAyB,CAA5B,EAA+B;AAC7B,iBAAKG,aAAL,GAAsB;AAACH,cAAAA,GAAG,EAAE,KAAKG,aAAL,CAAmBH,GAAnB,GAAyB,CAA/B;AAAkCC,cAAAA,IAAI,EAAE,KAAKE,aAAL,CAAmBF;AAA3D,aAAtB;AACD;;AACD;;AACF,aAAK,CAAL;AACEY,UAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;;AACA,cAAG,KAAKX,aAAL,CAAmBH,GAAnB,IAA0B,KAAKG,aAAL,CAAmBF,IAAnB,GAA0B,KAAKJ,QAAL,GAAgB,CAAvE,EAA0E;AACxE,iBAAKM,aAAL,GAAsB;AAACH,cAAAA,GAAG,EAAE,KAAKG,aAAL,CAAmBH,GAAnB,GAAyB,CAA/B;AAAkCC,cAAAA,IAAI,EAAE,KAAKE,aAAL,CAAmBF,IAAnB,GAA0B;AAAlE,aAAtB;AACD;;AACD;;AAEF;AACEY,UAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACA;AAvDJ;AAyDH,KA5DiB,CAzBA;AACjBD,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACA,GAHc,CAKf;;;AALe;;AAyFhB,eAAe,IAAIpB,SAAJ,EAAf","sourcesContent":["import {observable, action} from 'mobx';\n\nclass DataStore {\n\tconstructor(Data) {\n\t\tconsole.log('initializing datastore');\n\t}\n\n\t// grid constructor size\n\tgridSize = observable.box(9);\n\n\t// player states\n\tplayerPosition = observable({row: 0, cell: 0});\n\tplayerPowerLevel = observable.box(1);\n\n\t// enemy states\n\tenemyPosition = observable({row: 4, cell: 4});\n\tenemyPowerLevel = observable.box(2);\n\n\tmovePlayer = action( (targetRow, targetCell) => {\n\t\tif(this.playerPosition.row !== targetRow) {\n\t\t\tthis.playerPosition.row = targetRow;\n\t\t}\n\n\t\tif(this.playerPosition.cell !== targetCell) {\n\t\t\tthis.playerPosition.cell = targetCell;\n\t\t}\n\t});\n\n\tmoveEnemy = action( () => {\n\t\tconst randomDirection = Math.floor( Math.random() * this.gridSize);\n\n\t    switch (randomDirection) {\n\t      case 1:\n\t        console.log('enemy move down left');\n\t        if(this.enemyPosition.row < this.gridSize - 1 && this.enemyPosition.cell > 0) {\n\t        \tthis.enemyPosition = ({ row: this.enemyPosition.row + 1, cell: this.enemyPosition.cell - 1});\n\t        }\n\t        break;\n\t      case 2: \n\t        console.log('enemy move down');\n\t        if(this.enemyPosition.row < this.gridSize - 1) {\n\t          this.enemyPosition = ({ row: this.enemyPosition.row + 1, cell: this.enemyPosition.cell});\n\t        }\n\t        break;\n\t      case 3: \n\t        console.log('enemy move down right');\n\t        if(this.enemyPosition.row < this.gridSize - 1 && this.enemyPosition.cell < this.gridSize - 1) {\n\t          this.enemyPosition = ({row: this.enemyPosition.row + 1, cell: this.enemyPosition.cell + 1});\n\t        }\n\t        break;\n\t      case 4: \n\t        console.log('enemy move left');\n\t        if(this.enemyPosition.cell > 0) {\n\t          this.enemyPosition = ({row: this.enemyPosition.row, cell: this.enemyPosition.cell - 1});\n\t        }\n\t        break;\n\t      case 5: \n\t        console.log(`enemy won't move`);\n\t        break;\n\t      case 6: \n\t        console.log('enemy move right');\n\t        if (this.enemyPosition.cell < this.gridSize - 1) {\n\t          this.enemyPosition = ({row: this.enemyPosition.row, cell: this.enemyPosition.cell + 1})\n\t        }\n\t        break;\n\t      case 7: \n\t        console.log('enemy move up left');\n\t        if(this.enemyPosition.row > 0 && this.enemyPosition.cell > 0) {\n\t          this.enemyPosition = ({row: this.enemyPosition.row - 1, cell: this.enemyPosition.cell - 1})\n\t        }\n\t        break;\n\t      case 8: \n\t        console.log('enemy move up');\n\t        if(this.enemyPosition.row > 0) {\n\t          this.enemyPosition = ({row: this.enemyPosition.row - 1, cell: this.enemyPosition.cell});\n\t        }\n\t        break;\n\t      case 9: \n\t        console.log('enemy move up right');\n\t        if(this.enemyPosition.row && this.enemyPosition.cell < this.gridSize - 1) {\n\t          this.enemyPosition = ({row: this.enemyPosition.row - 1, cell: this.enemyPosition.cell + 1})\n\t        }\n\t        break;\n\n\t      default: \n\t        console.log('oops');\n\t        break;\n\t    }\n\t});\n}\n\nexport default new DataStore();"]},"metadata":{},"sourceType":"module"}