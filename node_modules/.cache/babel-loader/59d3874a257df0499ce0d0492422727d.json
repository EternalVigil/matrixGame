{"ast":null,"code":"import { observable, action, toJS } from 'mobx';\n\nclass DataStore {\n  constructor(Data) {\n    this.gridSize = observable.box(9);\n    this.playerPosition = observable({\n      row: 0,\n      cell: 0\n    });\n    this.enemyPosition = observable({\n      row: 4,\n      cell: 4\n    });\n    this.movePlayer = action((targetRow, targetCell) => {\n      console.log('moving player');\n\n      if (this.playerPosition.row !== targetRow) {\n        this.playerPosition.row = targetRow;\n      }\n\n      if (this.playerPosition.cell !== targetCell) {\n        this.playerPosition.cell = targetCell;\n      }\n\n      this.moveEnemy();\n    });\n    this.moveEnemy = action(() => {\n      console.log('moving enemy');\n      const randomDirection = Math.floor(Math.random() * this.gridSize);\n      console.log(randomDirection);\n\n      switch (randomDirection) {\n        case 1:\n          console.log('enemy move down left');\n\n          if (enemyPosition.rowCoordinate < this.gridSize - 1 && enemyPosition.cellCoordinate > 0) {\n            this.enemyPosition({\n              rowCoordinate: enemyPosition.rowCoordinate + 1,\n              cellCoordinate: enemyPosition.cellCoordinate - 1\n            });\n          }\n\n          break;\n\n        case 2:\n          console.log('enemy move down');\n\n          if (enemyPosition.rowCoordinate < this.gridSize - 1) {\n            this.enemyPosition({\n              rowCoordinate: enemyPosition.rowCoordinate + 1,\n              cellCoordinate: enemyPosition.cellCoordinate\n            });\n          }\n\n          break;\n\n        case 3:\n          console.log('enemy move down right');\n\n          if (enemyPosition.rowCoordinate < this.gridSize - 1 && enemyPosition.cellCoordinate < this.gridSize - 1) {\n            this.enemyPosition({\n              rowCoordinate: enemyPosition.rowCoordinate + 1,\n              cellCoordinate: enemyPosition.cellCoordinate + 1\n            });\n          }\n\n          break;\n\n        case 4:\n          console.log('enemy move left');\n\n          if (enemyPosition.cellCoordinate > 0) {\n            this.enemyPosition({\n              rowCoordinate: enemyPosition.rowCoordinate,\n              cellCoordinate: enemyPosition.cellCoordinate - 1\n            });\n          }\n\n          break;\n\n        case 5:\n          console.log(`enemy won't move`);\n          break;\n\n        case 6:\n          console.log('enemy move right');\n\n          if (enemyPosition.cellCoordinate < this.gridSize - 1) {\n            this.enemyPosition({\n              rowCoordinate: enemyPosition.rowCoordinate,\n              cellCoordinate: enemyPosition.cellCoordinate + 1\n            });\n          }\n\n          break;\n\n        case 7:\n          console.log('enemy move up left');\n\n          if (enemyPosition.rowCoordinate > 0 && enemyPosition.cellCoordinate > 0) {\n            this.enemyPosition({\n              rowCoordinate: enemyPosition.rowCoordinate - 1,\n              cellCoordinate: enemyPosition.cellCoordinate - 1\n            });\n          }\n\n          break;\n\n        case 8:\n          console.log('enemy move up');\n\n          if (enemyPosition.rowCoordinate > 0) {\n            this.enemyPosition({\n              rowCoordinate: enemyPosition.rowCoordinate - 1,\n              cellCoordinate: enemyPosition.cellCoordinate\n            });\n          }\n\n          break;\n\n        case 9:\n          console.log('enemy move up right');\n\n          if (enemyPosition.rowCoordinate && enemyPosition.cellCoordinate < this.gridSize - 1) {\n            this.enemyPosition({\n              rowCoordinate: enemyPosition.rowCoordinate - 1,\n              cellCoordinate: enemyPosition.cellCoordinate + 1\n            });\n          }\n\n          break;\n\n        default:\n          console.log('oops');\n          break;\n      }\n    });\n  }\n\n}\n\nexport default new DataStore();","map":{"version":3,"sources":["/Users/eternalvigil/Desktop/code-projects/matrixGame/src/stores/DataStore.js"],"names":["observable","action","toJS","DataStore","constructor","Data","gridSize","box","playerPosition","row","cell","enemyPosition","movePlayer","targetRow","targetCell","console","log","moveEnemy","randomDirection","Math","floor","random","rowCoordinate","cellCoordinate"],"mappings":"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","sourcesContent":["import {observable, action, toJS} from 'mobx';\n\nclass DataStore {\n\tconstructor(Data) {\n\t}\n\n\tgridSize = observable.box(9);\n\tplayerPosition = observable({row: 0, cell: 0});\n\tenemyPosition = observable({row: 4, cell: 4});\n\n\tmovePlayer = action( (targetRow, targetCell) => {\n\t\tconsole.log('moving player');\n\t\tif(this.playerPosition.row !== targetRow) {\n\t\t\tthis.playerPosition.row = targetRow;\n\t\t}\n\n\t\tif(this.playerPosition.cell !== targetCell) {\n\t\t\tthis.playerPosition.cell = targetCell;\n\t\t}\n\n\t\tthis.moveEnemy();\n\t});\n\n\tmoveEnemy = action( () => {\n\t\tconsole.log('moving enemy');\n\t\tconst randomDirection = Math.floor( Math.random() * this.gridSize);\n\t\tconsole.log(randomDirection);\n\n\t    switch (randomDirection) {\n\t      case 1:\n\t        console.log('enemy move down left');\n\t        if(enemyPosition.rowCoordinate < this.gridSize - 1 && enemyPosition.cellCoordinate > 0) {\n\t          this.enemyPosition({rowCoordinate: enemyPosition.rowCoordinate + 1, cellCoordinate: enemyPosition.cellCoordinate - 1});\n\t        }\n\t        break;\n\t      case 2: \n\t        console.log('enemy move down');\n\t        if(enemyPosition.rowCoordinate < this.gridSize - 1) {\n\t          this.enemyPosition({ rowCoordinate: enemyPosition.rowCoordinate + 1, cellCoordinate: enemyPosition.cellCoordinate});\n\t        }\n\t        break;\n\t      case 3: \n\t        console.log('enemy move down right');\n\t        if(enemyPosition.rowCoordinate < this.gridSize - 1 && enemyPosition.cellCoordinate < this.gridSize - 1) {\n\t          this.enemyPosition({rowCoordinate: enemyPosition.rowCoordinate + 1, cellCoordinate: enemyPosition.cellCoordinate + 1});\n\t        }\n\t        break;\n\t      case 4: \n\t        console.log('enemy move left');\n\t        if(enemyPosition.cellCoordinate > 0) {\n\t          this.enemyPosition({rowCoordinate: enemyPosition.rowCoordinate, cellCoordinate: enemyPosition.cellCoordinate - 1});\n\t        }\n\t        break;\n\t      case 5: \n\t        console.log(`enemy won't move`);\n\t        break;\n\t      case 6: \n\t        console.log('enemy move right');\n\t        if (enemyPosition.cellCoordinate < this.gridSize - 1) {\n\t          this.enemyPosition({rowCoordinate: enemyPosition.rowCoordinate, cellCoordinate: enemyPosition.cellCoordinate + 1})\n\t        }\n\t        break;\n\t      case 7: \n\t        console.log('enemy move up left');\n\t        if(enemyPosition.rowCoordinate > 0 && enemyPosition.cellCoordinate > 0) {\n\t          this.enemyPosition({rowCoordinate: enemyPosition.rowCoordinate - 1, cellCoordinate: enemyPosition.cellCoordinate - 1})\n\t        }\n\t        break;\n\t      case 8: \n\t        console.log('enemy move up');\n\t        if(enemyPosition.rowCoordinate > 0) {\n\t          this.enemyPosition({rowCoordinate: enemyPosition.rowCoordinate - 1, cellCoordinate: enemyPosition.cellCoordinate});\n\t        }\n\t        break;\n\t      case 9: \n\t        console.log('enemy move up right');\n\t        if(enemyPosition.rowCoordinate && enemyPosition.cellCoordinate < this.gridSize - 1) {\n\t          this.enemyPosition({rowCoordinate: enemyPosition.rowCoordinate - 1, cellCoordinate: enemyPosition.cellCoordinate + 1})\n\t        }\n\t        break;\n\n\t      default: \n\t        console.log('oops');\n\t        break;\n\t    }\n\t});\n}\n\nexport default new DataStore();"]},"metadata":{},"sourceType":"module"}